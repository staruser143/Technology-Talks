@Service
public class PdfGenerationService {

    private final TransformerFactory secureTransformerFactory;

    public PdfGenerationService() throws TransformerConfigurationException {
        this.secureTransformerFactory = createSecureTransformerFactory();
    }

    private TransformerFactory createSecureTransformerFactory() throws TransformerConfigurationException {
        TransformerFactory factory = TransformerFactory.newInstance();
        factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

        // Aggressively disable risky features
        String[] dangerousFeatures = {
            "http://xml.org/sax/features/external-general-entities",
            "http://xml.org/sax/features/external-parameter-entities",
            "http://apache.org/xml/features/disallow-doctype-decl",
            "http://apache.org/xml/features/nonvalidating/load-external-dtd"
        };

        for (String feature : dangerousFeatures) {
            try {
                if (feature.equals("http://apache.org/xml/features/disallow-doctype-decl")) {
                    factory.setFeature(feature, true); // block DOCTYPE
                } else {
                    factory.setFeature(feature, false); // disable external entities
                }
            } catch (Exception e) {
                // Log: "Feature not supported: " + feature
            }
        }
        return factory;
    }

    public byte[] generatePdfFromXml(String xmlContent, String xsltPath) throws Exception {
        // Use secure factory
        Source xslt = new StreamSource(new ClassPathResource(xsltPath).getInputStream());
        Transformer transformer = secureTransformerFactory.newTransformer(xslt);

        Source src = new StreamSource(new StringReader(xmlContent));
        
        // Rest of FOP logic...
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        Fop fop = FopFactory.newInstance().newFop(MimeConstants.MIME_PDF, out);
        Result res = new SAXResult(fop.getDefaultHandler());
        transformer.transform(src, res);

        return out.toByteArray();
    }
}